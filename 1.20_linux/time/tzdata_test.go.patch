//--from
import (
	"reflect"
	"testing"
	"time"
	_ "time/tzdata"
)
//--to
import (
	"reflect"
	"testing"
	_ "time/tzdata"
)
//--from
func TestEmbeddedTZData(t *testing.T) {
	undo := time.DisablePlatformSources()
	defer undo()

	for _, zone := range zones {
		ref, err := time.LoadLocation(zone)
		if err != nil {
			t.Errorf("LoadLocation(%q): %v", zone, err)
			continue
		}

		embedded, err := time.LoadFromEmbeddedTZData(zone)
		if err != nil {
			t.Errorf("LoadFromEmbeddedTZData(%q): %v", zone, err)
			continue
		}
		sample, err := time.LoadLocationFromTZData(zone, []byte(embedded))
		if err != nil {
			t.Errorf("LoadLocationFromTZData failed for %q: %v", zone, err)
			continue
		}

		// Compare the name and zone fields of ref and sample.
		// The tx field changes faster as tzdata is updated.
		// The cache fields are expected to differ.
		v1 := reflect.ValueOf(ref).Elem()
		v2 := reflect.ValueOf(sample).Elem()
		typ := v1.Type()
		nf := typ.NumField()
		found := 0
		for i := 0; i < nf; i++ {
			ft := typ.Field(i)
			if ft.Name != "name" && ft.Name != "zone" {
				continue
			}
			found++
			if !equal(t, v1.Field(i), v2.Field(i)) {
				t.Errorf("zone %s: system and embedded tzdata field %s differs", zone, ft.Name)
			}
		}
		if found != 2 {
			t.Errorf("test must be updated for change to time.Location struct")
		}
	}
}
//--to
func TestEmbeddedTZData(t *testing.T) {
	t.Skip("location is not supported in this environment")
}
