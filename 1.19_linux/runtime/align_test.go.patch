//--from
import (
	"bytes"
	"go/ast"
	"go/build"
	"go/importer"
	"go/parser"
	"go/printer"
	"go/token"
	"go/types"
	"os"
	"regexp"
	"runtime"
	"strings"
	"testing"
)
//--to
import (
	"bytes"
	"go/ast"
	"go/build"
	"go/printer"
	"go/token"
	"go/types"
	"strings"
	"testing"
)
//--from
func TestAtomicAlignment(t *testing.T) {
	// Read the code making the tables above, to see which fields and
	// variables we are currently checking.
	checked := map[string]bool{}
	x, err := os.ReadFile("./align_runtime_test.go")
	if err != nil {
		t.Fatalf("read failed: %v", err)
	}
	fieldDesc := map[int]string{}
	r := regexp.MustCompile(`unsafe[.]Offsetof[(](\w+){}[.](\w+)[)]`)
	matches := r.FindAllStringSubmatch(string(x), -1)
	for i, v := range matches {
		checked["field runtime."+v[1]+"."+v[2]] = true
		fieldDesc[i] = v[1] + "." + v[2]
	}
	varDesc := map[int]string{}
	r = regexp.MustCompile(`unsafe[.]Pointer[(]&(\w+)[)]`)
	matches = r.FindAllStringSubmatch(string(x), -1)
	for i, v := range matches {
		checked["var "+v[1]] = true
		varDesc[i] = v[1]
	}

	// Check all of our alignemnts. This is the actual core of the test.
	for i, d := range runtime.AtomicFields {
		if d%8 != 0 {
			t.Errorf("field alignment of %s failed: offset is %d", fieldDesc[i], d)
		}
	}
	for i, p := range runtime.AtomicVariables {
		if uintptr(p)%8 != 0 {
			t.Errorf("variable alignment of %s failed: address is %x", varDesc[i], p)
		}
	}

	// The code above is the actual test. The code below attempts to check
	// that the tables used by the code above are exhaustive.

	// Parse the whole runtime package, checking that arguments of
	// appropriate atomic operations are in the list above.
	fset := token.NewFileSet()
	m, err := parser.ParseDir(fset, ".", nil, 0)
	if err != nil {
		t.Fatalf("parsing runtime failed: %v", err)
	}
	pkg := m["runtime"] // Note: ignore runtime_test and main packages

	// Filter files by those for the current architecture/os being tested.
	fileMap := map[string]bool{}
	for _, f := range buildableFiles(t, ".") {
		fileMap[f] = true
	}
	var files []*ast.File
	for fname, f := range pkg.Files {
		if fileMap[fname] {
			files = append(files, f)
		}
	}

	// Call go/types to analyze the runtime package.
	var info types.Info
	info.Types = map[ast.Expr]types.TypeAndValue{}
	conf := types.Config{Importer: importer.Default()}
	_, err = conf.Check("runtime", fset, files, &info)
	if err != nil {
		t.Fatalf("typechecking runtime failed: %v", err)
	}

	// Analyze all atomic.*64 callsites.
	v := Visitor{t: t, fset: fset, types: info.Types, checked: checked}
	ast.Walk(&v, pkg)
}
//--to
func TestAtomicAlignment(t *testing.T) {
	t.Skip("file is not supported in this environment")
}
